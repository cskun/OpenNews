package me.jinkun.opennews.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import me.jinkun.opennews.domain.NewsImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_IMAGE".
*/
public class NewsImageDao extends AbstractDao<NewsImage, Long> {

    public static final String TABLENAME = "NEWS_IMAGE";

    /**
     * Properties of entity NewsImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Alt = new Property(1, String.class, "alt", false, "ALT");
        public final static Property Pixel = new Property(2, String.class, "pixel", false, "PIXEL");
        public final static Property Ref = new Property(3, String.class, "ref", false, "REF");
        public final static Property Src = new Property(4, String.class, "src", false, "SRC");
    };


    public NewsImageDao(DaoConfig config) {
        super(config);
    }
    
    public NewsImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_IMAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ALT\" TEXT," + // 1: alt
                "\"PIXEL\" TEXT," + // 2: pixel
                "\"REF\" TEXT," + // 3: ref
                "\"SRC\" TEXT);"); // 4: src
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_IMAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(2, alt);
        }
 
        String pixel = entity.getPixel();
        if (pixel != null) {
            stmt.bindString(3, pixel);
        }
 
        String ref = entity.getRef();
        if (ref != null) {
            stmt.bindString(4, ref);
        }
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(5, src);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsImage readEntity(Cursor cursor, int offset) {
        NewsImage entity = new NewsImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pixel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ref
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // src
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPixel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRef(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSrc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
